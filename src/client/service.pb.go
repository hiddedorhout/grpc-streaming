// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service.proto

package grpc_streaming

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type DisplayRequest struct {
	ProcessID            string   `protobuf:"bytes,1,opt,name=processID,proto3" json:"processID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DisplayRequest) Reset()         { *m = DisplayRequest{} }
func (m *DisplayRequest) String() string { return proto.CompactTextString(m) }
func (*DisplayRequest) ProtoMessage()    {}
func (*DisplayRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{0}
}

func (m *DisplayRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DisplayRequest.Unmarshal(m, b)
}
func (m *DisplayRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DisplayRequest.Marshal(b, m, deterministic)
}
func (m *DisplayRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DisplayRequest.Merge(m, src)
}
func (m *DisplayRequest) XXX_Size() int {
	return xxx_messageInfo_DisplayRequest.Size(m)
}
func (m *DisplayRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DisplayRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DisplayRequest proto.InternalMessageInfo

func (m *DisplayRequest) GetProcessID() string {
	if m != nil {
		return m.ProcessID
	}
	return ""
}

type DisplayResponse struct {
	Code                 string   `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Info                 string   `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DisplayResponse) Reset()         { *m = DisplayResponse{} }
func (m *DisplayResponse) String() string { return proto.CompactTextString(m) }
func (*DisplayResponse) ProtoMessage()    {}
func (*DisplayResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{1}
}

func (m *DisplayResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DisplayResponse.Unmarshal(m, b)
}
func (m *DisplayResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DisplayResponse.Marshal(b, m, deterministic)
}
func (m *DisplayResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DisplayResponse.Merge(m, src)
}
func (m *DisplayResponse) XXX_Size() int {
	return xxx_messageInfo_DisplayResponse.Size(m)
}
func (m *DisplayResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DisplayResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DisplayResponse proto.InternalMessageInfo

func (m *DisplayResponse) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *DisplayResponse) GetInfo() string {
	if m != nil {
		return m.Info
	}
	return ""
}

func init() {
	proto.RegisterType((*DisplayRequest)(nil), "grpc_streaming.DisplayRequest")
	proto.RegisterType((*DisplayResponse)(nil), "grpc_streaming.DisplayResponse")
}

func init() { proto.RegisterFile("service.proto", fileDescriptor_a0b84a42fa06f626) }

var fileDescriptor_a0b84a42fa06f626 = []byte{
	// 185 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2d, 0x4e, 0x2d, 0x2a,
	0xcb, 0x4c, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x4b, 0x2f, 0x2a, 0x48, 0x8e,
	0x2f, 0x2e, 0x29, 0x4a, 0x4d, 0xcc, 0xcd, 0xcc, 0x4b, 0x57, 0xd2, 0xe3, 0xe2, 0x73, 0xc9, 0x2c,
	0x2e, 0xc8, 0x49, 0xac, 0x0c, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0x11, 0x92, 0xe1, 0xe2, 0x2c,
	0x28, 0xca, 0x4f, 0x4e, 0x2d, 0x2e, 0xf6, 0x74, 0x91, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x42,
	0x08, 0x28, 0x59, 0x72, 0xf1, 0xc3, 0xd5, 0x17, 0x17, 0xe4, 0xe7, 0x15, 0xa7, 0x0a, 0x09, 0x71,
	0xb1, 0x24, 0xe7, 0xa7, 0xa4, 0x42, 0xd5, 0x82, 0xd9, 0x20, 0xb1, 0xcc, 0xbc, 0xb4, 0x7c, 0x09,
	0x26, 0x88, 0x18, 0x88, 0x6d, 0xb4, 0x95, 0x91, 0x8b, 0x27, 0x18, 0x66, 0xb1, 0x63, 0x80, 0xa7,
	0x50, 0x20, 0xdc, 0x6e, 0xdf, 0xd4, 0xe2, 0xe2, 0xc4, 0xf4, 0x54, 0x21, 0x39, 0x3d, 0x54, 0xe7,
	0xe9, 0xa1, 0xba, 0x4d, 0x4a, 0x1e, 0xa7, 0x3c, 0xd4, 0x2d, 0x41, 0x5c, 0xbc, 0x50, 0x21, 0x88,
	0x4d, 0x14, 0x9b, 0x68, 0xc0, 0x98, 0xc4, 0x06, 0x0e, 0x39, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x34, 0x9a, 0xe9, 0xc3, 0x4a, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// StreamingAPIClient is the client API for StreamingAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StreamingAPIClient interface {
	DisplayMessage(ctx context.Context, in *DisplayRequest, opts ...grpc.CallOption) (*DisplayResponse, error)
	DisplayStream(ctx context.Context, in *DisplayRequest, opts ...grpc.CallOption) (StreamingAPI_DisplayStreamClient, error)
}

type streamingAPIClient struct {
	cc *grpc.ClientConn
}

func NewStreamingAPIClient(cc *grpc.ClientConn) StreamingAPIClient {
	return &streamingAPIClient{cc}
}

func (c *streamingAPIClient) DisplayMessage(ctx context.Context, in *DisplayRequest, opts ...grpc.CallOption) (*DisplayResponse, error) {
	out := new(DisplayResponse)
	err := c.cc.Invoke(ctx, "/grpc_streaming.StreamingAPI/DisplayMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamingAPIClient) DisplayStream(ctx context.Context, in *DisplayRequest, opts ...grpc.CallOption) (StreamingAPI_DisplayStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_StreamingAPI_serviceDesc.Streams[0], "/grpc_streaming.StreamingAPI/DisplayStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamingAPIDisplayStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StreamingAPI_DisplayStreamClient interface {
	Recv() (*DisplayResponse, error)
	grpc.ClientStream
}

type streamingAPIDisplayStreamClient struct {
	grpc.ClientStream
}

func (x *streamingAPIDisplayStreamClient) Recv() (*DisplayResponse, error) {
	m := new(DisplayResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamingAPIServer is the server API for StreamingAPI service.
type StreamingAPIServer interface {
	DisplayMessage(context.Context, *DisplayRequest) (*DisplayResponse, error)
	DisplayStream(*DisplayRequest, StreamingAPI_DisplayStreamServer) error
}

func RegisterStreamingAPIServer(s *grpc.Server, srv StreamingAPIServer) {
	s.RegisterService(&_StreamingAPI_serviceDesc, srv)
}

func _StreamingAPI_DisplayMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisplayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamingAPIServer).DisplayMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_streaming.StreamingAPI/DisplayMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamingAPIServer).DisplayMessage(ctx, req.(*DisplayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamingAPI_DisplayStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DisplayRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StreamingAPIServer).DisplayStream(m, &streamingAPIDisplayStreamServer{stream})
}

type StreamingAPI_DisplayStreamServer interface {
	Send(*DisplayResponse) error
	grpc.ServerStream
}

type streamingAPIDisplayStreamServer struct {
	grpc.ServerStream
}

func (x *streamingAPIDisplayStreamServer) Send(m *DisplayResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _StreamingAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpc_streaming.StreamingAPI",
	HandlerType: (*StreamingAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DisplayMessage",
			Handler:    _StreamingAPI_DisplayMessage_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "DisplayStream",
			Handler:       _StreamingAPI_DisplayStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "service.proto",
}
